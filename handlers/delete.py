from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from datetime import datetime
from states.transaction_states import DeleteState
from database.db import db
from utils.keyboards import main_menu, back_keyboard  # ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω–æ
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback

router = Router()

# üîπ –®–∞–≥ 1: —Å—Ç–∞—Ä—Ç —É–¥–∞–ª–µ–Ω–∏—è
@router.message(F.text == "üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
async def start_deletion(message: Message, state: FSMContext):
    await state.set_state(DeleteState.choosing_date)
    await message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ <b>–Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É</b> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:",
        reply_markup=await SimpleCalendar().start_calendar()
    )

# üîπ –®–∞–≥ 2: –≤—ã–±–æ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
@router.callback_query(SimpleCalendarCallback.filter(), DeleteState.choosing_date)
async def choose_start_date(callback_query: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    selected, start_date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.answer()
        await state.update_data(start_date=start_date)
        await state.set_state(DeleteState.entering_filter_value)
        await callback_query.message.answer(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É</b>:",
            reply_markup=await SimpleCalendar().start_calendar()
        )

# üîπ –®–∞–≥ 3: –≤—ã–±–æ—Ä –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
@router.callback_query(SimpleCalendarCallback.filter(), DeleteState.entering_filter_value)
async def choose_end_date(callback_query: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    selected, end_date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.answer()
        data = await state.get_data()
        await state.update_data(end_date=end_date)

        start_str = data['start_date'].strftime("%Y-%m-%d")
        end_str = end_date.strftime("%Y-%m-%d")

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_delete"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_delete")
            ]
        ])

        await state.set_state(DeleteState.confirming)
        await callback_query.message.answer(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n<b>—Å {start_str} –ø–æ {end_str}</b>?",
            reply_markup=keyboard
        )

# üîπ –®–∞–≥ 4: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data == "confirm_delete", DeleteState.confirming)
async def confirm_deletion(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    start = datetime.combine(data['start_date'], datetime.min.time())
    end = datetime.combine(data['end_date'], datetime.max.time())

    user_id = await db.execute(
        "SELECT id FROM users WHERE telegram_id = $1",
        callback.from_user.id,
        fetchval=True
    )

    deleted = await db.execute(
        "DELETE FROM transactions WHERE user_id = $1 AND date BETWEEN $2 AND $3 RETURNING id",
        user_id, start, end, fetch=True
    )

    await state.clear()
    await callback.message.answer(
        f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: <b>{len(deleted)}</b>",
        reply_markup=main_menu()
    )

# üîπ –®–∞–≥ 5: –æ—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data == "cancel_delete", DeleteState.confirming)
async def cancel_deletion(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())

# üîô –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back_from_delete(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üîÅ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
