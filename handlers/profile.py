# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from aiogram import Router, F
from aiogram.types import Message
from database.db import db

router = Router()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile
@router.message(F.text == "/profile")
async def profile_command(message: Message):
    await show_profile(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üë§ –ü—Ä–æ—Ñ–∏–ª—å"
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    tg_id = message.from_user.id
    user = await db.execute(
        "SELECT id, username, first_name, created_at FROM users WHERE telegram_id = $1",
        tg_id,
        fetchrow=True
    )
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    income = await db.execute(
        "SELECT COALESCE(SUM(amount), 0) FROM transactions WHERE user_id = $1 AND type = 'income'",
        user['id'], fetchval=True
    )
    expense = await db.execute(
        "SELECT COALESCE(SUM(amount), 0) FROM transactions WHERE user_id = $1 AND type = 'expense'",
        user['id'], fetchval=True
    )
    count = await db.execute(
        "SELECT COUNT(*) FROM transactions WHERE user_id = $1",
        user['id'], fetchval=True
    )

    await message.answer(
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"–ò–º—è: {user['first_name']}\n"
        f"Username: @{user['username']}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['created_at'].date()}\n\n"
        f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {count}\n"
        f"üìà –û–±—â–∏–π –¥–æ—Ö–æ–¥: {income:.2f} ‚ÇΩ\n"
        f"üìâ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {expense:.2f} ‚ÇΩ"
    )
