from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
from datetime import datetime
from states.export_states import AnalyticsState
from database.db import db
from services.charts import generate_bar_chart, generate_pie_chart
from utils.keyboards import year_keyboard, main_menu, back_keyboard
import os

router = Router()

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
@router.message(F.text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def start_analytics(message: Message, state: FSMContext):
    await state.set_state(AnalyticsState.choosing_year)
    await message.answer("üìä –í—ã –≤–æ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.\n–ù–∞–∂–º–∏—Ç–µ üîô –ù–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.", reply_markup=back_keyboard())
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=year_keyboard())

# üìÜ –í—ã–±–æ—Ä –≥–æ–¥–∞
@router.callback_query(F.data.startswith("year_"), AnalyticsState.choosing_year)
async def choose_year(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    year = int(callback.data.removeprefix("year_"))
    await state.update_data(year=year)

    user_id = await db.execute(
        "SELECT id FROM users WHERE telegram_id = $1",
        callback.from_user.id,
        fetchval=True
    )

    start_dt = datetime(year, 1, 1)
    end_dt = datetime(year + 1, 1, 1)

    transactions = await db.execute(
        """
        SELECT t.type, c.name, t.amount, t.date
        FROM transactions t
        LEFT JOIN categories c ON t.category_id = c.id
        WHERE t.user_id = $1 AND t.date >= $2 AND t.date < $3
        """,
        user_id, start_dt, end_dt, fetch=True
    )

    if not transactions:
        await callback.message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ <b>{year}</b> –≥–æ–¥.")
    else:
        await callback.message.answer(f"üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {year} –≥–æ–¥:</b>")

        bar_path = generate_bar_chart(transactions)
        pie_path = generate_pie_chart(transactions)

        await callback.message.answer_photo(FSInputFile(bar_path), caption="üìä –î–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º")
        await callback.message.answer_photo(FSInputFile(pie_path), caption="üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")

        os.remove(bar_path)
        os.remove(pie_path)

    await state.set_state(AnalyticsState.choosing_start_date)
    await callback.message.answer(
        "üìÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ <b>–Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É</b> –ø–µ—Ä–∏–æ–¥–∞:",
        reply_markup=await SimpleCalendar().start_calendar()
    )

# üìÖ –í—ã–±–æ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
@router.callback_query(SimpleCalendarCallback.filter(), AnalyticsState.choosing_start_date)
async def choose_start_date(callback: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    selected, start_date = await SimpleCalendar().process_selection(callback, callback_data)
    if selected:
        await callback.answer()
        await state.update_data(start_date=start_date)
        await state.set_state(AnalyticsState.choosing_end_date)
        await callback.message.answer(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É</b> –ø–µ—Ä–∏–æ–¥–∞:",
            reply_markup=await SimpleCalendar().start_calendar()
        )

# üìÖ –í—ã–±–æ—Ä –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
@router.callback_query(SimpleCalendarCallback.filter(), AnalyticsState.choosing_end_date)
async def choose_end_date(callback: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    selected, end_date = await SimpleCalendar().process_selection(callback, callback_data)
    if selected:
        await callback.answer()
        data = await state.get_data()

        start_dt = datetime.combine(data["start_date"], datetime.min.time())
        end_dt = datetime.combine(end_date, datetime.max.time())
        year = data["year"]

        readable_start = data["start_date"].strftime("%d %B %Y")
        readable_end = end_date.strftime("%d %B %Y")
        await callback.message.answer(
            f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> —Å <b>{readable_start}</b> –ø–æ <b>{readable_end}</b>\n"
            f"üóì <b>–ì–æ–¥:</b> {year}"
        )

        user_id = await db.execute(
            "SELECT id FROM users WHERE telegram_id = $1",
            callback.from_user.id,
            fetchval=True
        )

        transactions = await db.execute(
            """
            SELECT t.type, c.name, t.amount, t.date
            FROM transactions t
            LEFT JOIN categories c ON t.category_id = c.id
            WHERE t.user_id = $1 AND t.date BETWEEN $2 AND $3
            """,
            user_id, start_dt, end_dt, fetch=True
        )

        if not transactions:
            await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
            await state.clear()
            return

        bar_path = generate_bar_chart(transactions)
        pie_path = generate_pie_chart(transactions)

        await callback.message.answer_photo(FSInputFile(bar_path), caption="üìä –î–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º")
        await callback.message.answer_photo(FSInputFile(pie_path), caption="üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")

        os.remove(bar_path)
        os.remove(pie_path)
        await state.clear()

# üîô –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back_from_analytics(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üîÅ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
